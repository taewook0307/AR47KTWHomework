#include <iostream>

int main()
{
    //
    
    // 00000000 00000000 00000000 00000001
    int Value = 1;

    // 00000000 00000000 00000000 00000010
    Value = 2;

    //2진수 표현 => 앞에 0b를 붙임
    Value = 0b00000000000000000000000000000011;     // Value = 3

    //       ∨ : 제일 앞 부호는 부호비트 => 부호비트가 1이면 음수, 0이면 양수
    Value = 0b11111111111111111111111111111111;

    Value = 0b00000000000000000000000000000000;     //Value = +0(?)
    Value = 0b10000000000000000000000000000000;     //Value = -0(?)    2진수 표현법대로 하면 0에서 논리적 허점이 발생
    // 2의 보수법이라는 표현을 통해서 논리적 허점을 피해가면서도 모든 숫자를 다 표현
    // 음수를 표현할 때는 역수를 취하기로 함.
    Value = 0b10000000000000000000000000000000;
    // 맨 앞 비트(32번째 비트)를 부호비트로 선언 (1이면 음수, 0이면 양수)
    // 맨 앞 비트가 1이면 무조건 음수로 처리하고
    // 2의 보수법을 이용해 비트가 0이면 더해주는 방식으로 처리하기로 결정.
    //ex)
    Value = 0b11111111111111111111111111111111;     // Value = -1  => -1-0 = -1
    Value = 0b11111111111111111111111111111110;     // Value = -2  =>  -1-1 = -2
    Value = 0b11111111111111111111111111111011;     // Value = -5  =>  -1-4 = -5
    Value = 0b11111111111111111111111111110100;     // Value = -12 =>  -1-1-2-8 = -12
    Value = 0b11111111111111111111111111110000;     // Value = -16 =>  -1-1-2-4-8 = -16
    Value = 0b11111111111111111111111111111100;     // Value = -4  =>  -1-1-2 = -4
    Value = 0b11111111111111111111111111110101;     // Value = -11 =>  -1-2-8 = -11
}